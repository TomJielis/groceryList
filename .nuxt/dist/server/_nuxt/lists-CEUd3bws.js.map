{"version":3,"file":"lists-CEUd3bws.js","sources":["../../../../composables/useGroceryList.ts","../../../../stores/lists.ts"],"sourcesContent":["import {ref} from 'vue'\n\nexport function useGroceryList() {\n    let items = ref([]);\n    let lists = ref([]);\n\n    async function fetchLists() {\n        try {\n            const response = await fetch('/api/groceryList/');\n            if (!response.ok) {\n                throw new Error(`Failed to fetch lists: ${response.statusText}`);\n            }\n            let listResult = (await response.json()).data;\n            lists.value = listResult.map(item => ({\n                ...item,\n            }));\n        } catch (error) {\n            console.error('Error fetching lists:', error);\n        }\n    }\n\n    async function createList(name: string) {\n        const response = await fetch('/api/groceryList/store', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({name}),\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to create list: ${response.statusText}`);\n        }\n        const data = await response.json();\n\n        if (!data.data) {\n            throw new Error(`Failed to create list: ${response.statusText}`);\n        }\n\n       return data;\n    }\n\n    async function shareList(listId: number, email: string) {\n        // Placeholder for share functionality\n        let route = '/api/groceryList/share'\n        $fetch(route, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {id: listId, email: email}\n        });\n\n    }\n\n    async function favorite(id: number | null) {\n        const response = await fetch('/api/groceryList/favorite', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({id}),\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to create list: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (!data.message) {\n            throw new Error(`Failed to create list: ${response.statusText}`);\n        }\n    }\n\n    async function deleteList(id: number) {\n        try {\n            const response = await fetch('/api/groceryList/delete', {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({id}),\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to create list: ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error('Error creating list:', error);\n        }\n    }\n\n\n    async function fetchItems(listId: number | null = null) {\n        try {\n            const response = await fetch('/api/groceryListItem/', {\n                method: 'POST',\n                body: JSON.stringify({listId}),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch items: ${response.statusText}`);\n            }\n            let listItems = (await response.json()).data;\n            items.value = listItems.map(item => ({\n                ...item,\n                quantity: item.quantity || 1\n            }));\n        } catch (error) {\n            console.error('Error fetching items:', error);\n        }\n    }\n\n    async function addItem(item: string, listId: string) {\n        const {data} = await $fetch('/api/groceryListItem/store', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {name: item, quantity: 1, listId: listId},\n        });\n        items.value = [...items.value, data];\n    }\n\n    function clearItem(item: object) {\n        items.value = items.value.filter(i => i.name !== item.name)\n        let route = '/api/groceryListItem/delete'\n        $fetch(route, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {id: item.id}\n        });\n    }\n\n    function checked(item: object) {\n        let route = '/api/groceryListItem/checked'\n        $fetch(route, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {id: item.id, checked: item.checked}\n        });\n    }\n\n    function increaseItems(item: object) {\n        const foundItem = items.value.find(i => i.id === item.id)\n        foundItem.quantity += 1\n        let route = '/api/groceryListItem/increase'\n        $fetch(route, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {id: item.id}\n        });\n    }\n\n    function decreaseItems(item: object) {\n        const foundItem = items.value.find(i => i.id === item.id)\n        if (foundItem.quantity === 1) {\n            clearItem(item)\n            return\n        }\n        foundItem.quantity -= 1\n\n        let route = '/api/groceryListItem/decrease'\n        $fetch(route, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: {id: item.id}\n        });\n    }\n\n    return {\n        items,\n        lists,\n        fetchLists,\n        favorite,\n        createList,\n        shareList,\n        deleteList,\n        fetchItems,\n        addItem,\n        checked,\n        clearItem,\n        increaseItems,\n        decreaseItems\n    }\n}","import { defineStore } from 'pinia';\nimport type {TGroceryList} from '~/types/TGroceryList';\nimport { useGroceryList} from \"~/composables/useGroceryList\";\n\nconst { fetchLists, lists } = useGroceryList();\nexport const useListStore = defineStore('list', {\n  state: () => ({\n    lists: [] as TGroceryList[],\n  }),\n  actions: {\n    setList(groceryList: TGroceryList[]) {\n      this.lists = groceryList;\n    },\n    addList(groceryList: TGroceryList) {\n      this.lists.push(groceryList);\n    },\n    removeList(id: number) {\n        // @ts-ignore\n      this.lists = this.lists.filter(list => list.id !== id)\n    },\n    clearList() {\n      this.lists = [];\n    },\n    async fetchLists() {\n      await fetchLists();\n      // @ts-ignore\n       this.setList(lists);\n    }\n  },\n  persist: true,\n})\n"],"names":["lists","fetchLists"],"mappings":";;AAEO,SAAS,iBAAiB;AAC7B,MAAI,QAAQ,IAAI,EAAE;AAClB,MAAIA,SAAQ,IAAI,EAAE;AAElB,iBAAeC,cAAa;AACxB,QAAI;AACA,YAAM,WAAW,MAAM,MAAM,mBAAmB;AAChD,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,MACnE;AACA,UAAI,cAAc,MAAM,SAAS,KAAA,GAAQ;AACzC,MAAAD,OAAM,QAAQ,WAAW,IAAI,CAAA,UAAS;AAAA,QAClC,GAAG;AAAA,MAAA,EACL;AAAA,IACN,SAAS,OAAO;AACZ,cAAQ,MAAM,yBAAyB,KAAK;AAAA,IAChD;AAAA,EACJ;AAEA,iBAAe,WAAW,MAAc;AACpC,UAAM,WAAW,MAAM,MAAM,0BAA0B;AAAA,MACnD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,KAAK,UAAU,EAAC,MAAK;AAAA,IAAA,CAC9B;AACD,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,IACnE;AACA,UAAM,OAAO,MAAM,SAAS,KAAA;AAE5B,QAAI,CAAC,KAAK,MAAM;AACZ,YAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,IACnE;AAED,WAAO;AAAA,EACV;AAEA,iBAAe,UAAU,QAAgB,OAAe;AAEpD,QAAI,QAAQ;AACZ,WAAO,OAAO;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,IAAI,QAAQ,MAAA;AAAA,IAAY,CAClC;AAAA,EAEL;AAEA,iBAAe,SAAS,IAAmB;AACvC,UAAM,WAAW,MAAM,MAAM,6BAA6B;AAAA,MACtD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,KAAK,UAAU,EAAC,IAAG;AAAA,IAAA,CAC5B;AACD,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,IACnE;AAEA,UAAM,OAAO,MAAM,SAAS,KAAA;AAC5B,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,IACnE;AAAA,EACJ;AAEA,iBAAe,WAAW,IAAY;AAClC,QAAI;AACA,YAAM,WAAW,MAAM,MAAM,2BAA2B;AAAA,QACpD,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QAAA;AAAA,QAEpB,MAAM,KAAK,UAAU,EAAC,IAAG;AAAA,MAAA,CAC5B;AACD,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,MACnE;AAAA,IACJ,SAAS,OAAO;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAAA,IAC/C;AAAA,EACJ;AAGA,iBAAe,WAAW,SAAwB,MAAM;AACpD,QAAI;AACA,YAAM,WAAW,MAAM,MAAM,yBAAyB;AAAA,QAClD,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,EAAC,QAAO;AAAA,QAC7B,SAAS;AAAA,UACL,gBAAgB;AAAA,QAAA;AAAA,MACpB,CACH;AACD,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,0BAA0B,SAAS,UAAU,EAAE;AAAA,MACnE;AACA,UAAI,aAAa,MAAM,SAAS,KAAA,GAAQ;AACxC,YAAM,QAAQ,UAAU,IAAI,CAAA,UAAS;AAAA,QACjC,GAAG;AAAA,QACH,UAAU,KAAK,YAAY;AAAA,MAAA,EAC7B;AAAA,IACN,SAAS,OAAO;AACZ,cAAQ,MAAM,yBAAyB,KAAK;AAAA,IAChD;AAAA,EACJ;AAEA,iBAAe,QAAQ,MAAc,QAAgB;AACjD,UAAM,EAAC,KAAA,IAAQ,MAAM,OAAO,8BAA8B;AAAA,MACtD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,MAAM,MAAM,UAAU,GAAG,OAAA;AAAA,IAAc,CACjD;AACD,UAAM,QAAQ,CAAC,GAAG,MAAM,OAAO,IAAI;AAAA,EACvC;AAEA,WAAS,UAAU,MAAc;AAC7B,UAAM,QAAQ,MAAM,MAAM,OAAO,OAAK,EAAE,SAAS,KAAK,IAAI;AAC1D,QAAI,QAAQ;AACZ,WAAO,OAAO;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,IAAI,KAAK,GAAA;AAAA,IAAE,CACrB;AAAA,EACL;AAEA,WAAS,QAAQ,MAAc;AAC3B,QAAI,QAAQ;AACZ,WAAO,OAAO;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,IAAI,KAAK,IAAI,SAAS,KAAK,QAAA;AAAA,IAAO,CAC5C;AAAA,EACL;AAEA,WAAS,cAAc,MAAc;AACjC,UAAM,YAAY,MAAM,MAAM,KAAK,OAAK,EAAE,OAAO,KAAK,EAAE;AACxD,cAAU,YAAY;AACtB,QAAI,QAAQ;AACZ,WAAO,OAAO;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,IAAI,KAAK,GAAA;AAAA,IAAE,CACrB;AAAA,EACL;AAEA,WAAS,cAAc,MAAc;AACjC,UAAM,YAAY,MAAM,MAAM,KAAK,OAAK,EAAE,OAAO,KAAK,EAAE;AACxD,QAAI,UAAU,aAAa,GAAG;AAC1B,gBAAU,IAAI;AACd;AAAA,IACJ;AACA,cAAU,YAAY;AAEtB,QAAI,QAAQ;AACZ,WAAO,OAAO;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,EAAC,IAAI,KAAK,GAAA;AAAA,IAAE,CACrB;AAAA,EACL;AAEA,SAAO;AAAA,IACH;AAAA,IACA,OAAAA;AAAA,IACA,YAAAC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;AC5LA,MAAM,EAAE,YAAY,MAAA,IAAU,eAAA;AACvB,MAAM,eAAe,YAAY,QAAQ;AAAA,EAC9C,OAAO,OAAO;AAAA,IACZ,OAAO,CAAA;AAAA,EAAC;AAAA,EAEV,SAAS;AAAA,IACP,QAAQ,aAA6B;AACnC,WAAK,QAAQ;AAAA,IACf;AAAA,IACA,QAAQ,aAA2B;AACjC,WAAK,MAAM,KAAK,WAAW;AAAA,IAC7B;AAAA,IACA,WAAW,IAAY;AAErB,WAAK,QAAQ,KAAK,MAAM,OAAO,CAAA,SAAQ,KAAK,OAAO,EAAE;AAAA,IACvD;AAAA,IACA,YAAY;AACV,WAAK,QAAQ,CAAA;AAAA,IACf;AAAA,IACA,MAAM,aAAa;AACjB,YAAM,WAAA;AAEL,WAAK,QAAQ,KAAK;AAAA,IACrB;AAAA,EAAA;AAAA,EAEF,SAAS;AACX,CAAC;"}