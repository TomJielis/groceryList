{"file":"useAuth-wezdSaW4.js","mappings":";AAGO,SAAS,UAAU;AACtB,QAAM,YAAY,aAAA;AAElB,iBAAe,SAAS,UAA6D;AACjF,UAAM,mBAAmB,MAAM,MAAM,uBAAuB;AAAA,MACxD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,MAAA;AAAA,MAEpB,MAAM,KAAK,UAAU,QAAQ;AAAA,IAAA,CAChC;AAED,QAAI,CAAC,iBAAiB,IAAI;AACtB,YAAM,IAAI,MAAM,4BAA4B,iBAAiB,UAAU,EAAE;AAAA,IAC7E;AAEA,UAAM,SAAS,MAAM,iBAAiB,KAAA;AACtC,YAAQ,IAAI,MAAM;AAClB,QAAI,CAAC,OAAO,MAAM;AACd,YAAM,IAAI,MAAM,OAAO,SAAS,gBAAgB;AAAA,IACpD;AACA,cAAU,QAAQ,OAAO,IAAI;AAE7B,WAAO;AAAA,EACX;AAEA,iBAAe,MAAM,UAA+C;AAChE,UAAM,gBAAgB,MAAM,MAAM,oBAAoB;AAAA,MAClD,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,mBAAmB;AAAA;AAAA,MAAA;AAAA,MAEvB,MAAM,KAAK,UAAU,QAAQ;AAAA,IAAA,CAChC;AAED,QAAI,CAAC,cAAc,IAAI;AACnB,YAAM,IAAI,MAAM,yBAAyB,cAAc,UAAU,EAAE;AAAA,IACvE;AAEA,QAAI,SAAS,MAAM,cAAc,KAAA;AAEjC,QAAI,CAAC,OAAO,MAAM;AACd,YAAM,IAAI,MAAM,OAAO,SAAS,cAAc;AAAA,IAClD;AAEA,WAAO;AAAA,EACX;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EAAA;AAER;","names":[],"sources":["../../../../composables/useAuth.ts"],"sourcesContent":["import {useAuthStore} from \"~/stores/auth\";\nimport {useRouter} from 'vue-router';\n\nexport function useAuth() {\n    const authStore = useAuthStore();\n\n    async function register(userData: { name: string, email: string, password: string }) {\n        const registerResponse = await fetch('/api/user/register/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData),\n        });\n\n        if (!registerResponse.ok) {\n            throw new Error(`Failed to register user: ${registerResponse.statusText}`);\n        }\n\n        const result = await registerResponse.json();\n        console.log(result);\n        if (!result.user) {\n            throw new Error(result.error || 'Register error');\n        }\n        authStore.setUser(result.user); // Update user state with returned data\n\n        return result;\n    }\n\n    async function login(userData: { email: string, password: string }) {\n        const loginResponse = await fetch('/api/user/login/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'withCredentials': 'true', // Ensure cookies are sent with the request\n            },\n            body: JSON.stringify(userData),\n        });\n\n        if (!loginResponse.ok) {\n            throw new Error(`Failed to login user: ${loginResponse.statusText}`);\n        }\n\n        let result = await loginResponse.json();\n\n        if (!result.user) {\n            throw new Error(result.error || 'Login failed');\n        }\n\n        return result;\n    }\n\n    return {\n        login,\n        register,\n    }\n}"],"version":3}